diff -ru a/src/dbinc/atomic.h b/src/dbinc/atomic.h
--- a/src/dbinc/atomic.h	2018-03-10 12:37:51.000000000 +0100
+++ b/src/dbinc/atomic.h	2018-03-10 12:39:39.000000000 +0100
@@ -73,7 +73,7 @@
  * These have no memory barriers; the caller must include them when necessary.
  */
 #define	atomic_read(p)		((p)->value)
-#define	atomic_init(p, val)	((p)->value = (val))
+#define	atomic_init_db(p, val)	((p)->value = (val))

 #ifdef HAVE_ATOMIC_SUPPORT

@@ -226,7 +226,7 @@
 #define	atomic_add(env, p, val)	((p)->value += (val))
 #define	atomic_compare_exchange(env, p, oldval, newval)		\
	(DB_ASSERT(env, atomic_read(p) == (oldval)),		\
-	atomic_init(p, (newval)), 1)
+	atomic_init_db(p, (newval)), 1)
 #else
 #define	atomic_inc(env, p)	__atomic_add_int(env, p, 1)
 #define	atomic_dec(env, p)	__atomic_add_int(env, p, -1)
diff -ru a/src/mp/mp_fget.c b/src/mp/mp_fget.c
--- a/src/mp/mp_fget.c	2018-03-10 12:37:51.000000000 +0100
+++ b/src/mp/mp_fget.c	2018-03-10 12:40:26.000000000 +0100
@@ -650,7 +650,7 @@

		/* Initialize enough so we can call __memp_bhfree. */
		alloc_bhp->flags = 0;
-		atomic_init(&alloc_bhp->ref, 1);
+		atomic_init_db(&alloc_bhp->ref, 1);
 #ifdef DIAGNOSTIC
		if ((uintptr_t)alloc_bhp->buf & (sizeof(size_t) - 1)) {
			__db_errx(env, DB_STR("3025",
@@ -965,7 +965,7 @@
			MVCC_MPROTECT(bhp->buf, mfp->pagesize,
			    PROT_READ);

-		atomic_init(&alloc_bhp->ref, 1);
+		atomic_init_db(&alloc_bhp->ref, 1);
		MUTEX_LOCK(env, alloc_bhp->mtx_buf);
		alloc_bhp->priority = bhp->priority;
		alloc_bhp->pgno = bhp->pgno;
diff -ru a/src/mp/mp_mvcc.c b/src/mp/mp_mvcc.c
--- a/src/mp/mp_mvcc.c	2018-03-10 12:37:51.000000000 +0100
+++ b/src/mp/mp_mvcc.c	2018-03-10 12:40:30.000000000 +0100
@@ -281,7 +281,7 @@
 #else
	memcpy(frozen_bhp, bhp, SSZA(BH, buf));
 #endif
-	atomic_init(&frozen_bhp->ref, 0);
+	atomic_init_db(&frozen_bhp->ref, 0);
	if (mutex != MUTEX_INVALID)
		frozen_bhp->mtx_buf = mutex;
	else if ((ret = __mutex_alloc(env, MTX_MPOOL_BH,
@@ -440,7 +440,7 @@
 #endif
		alloc_bhp->mtx_buf = mutex;
		MUTEX_LOCK(env, alloc_bhp->mtx_buf);
-		atomic_init(&alloc_bhp->ref, 1);
+		atomic_init_db(&alloc_bhp->ref, 1);
		F_CLR(alloc_bhp, BH_FROZEN);
	}

diff -ru a/src/mp/mp_region.c b/src/mp/mp_region.c
--- a/src/mp/mp_region.c	2018-03-10 12:37:51.000000000 +0100
+++ b/src/mp/mp_region.c	2018-03-10 12:40:36.000000000 +0100
@@ -278,7 +278,7 @@
			     MTX_MPOOL_FILE_BUCKET, 0, &htab[i].mtx_hash)) != 0)
				return (ret);
			SH_TAILQ_INIT(&htab[i].hash_bucket);
-			atomic_init(&htab[i].hash_page_dirty, 0);
+			atomic_init_db(&htab[i].hash_page_dirty, 0);
		}

		mtx_base = mtx_prev = MUTEX_INVALID;
@@ -332,7 +332,7 @@
		    DB_MUTEX_SHARED, &hp->mtx_hash)) != 0)
			return (ret);
		SH_TAILQ_INIT(&hp->hash_bucket);
-		atomic_init(&hp->hash_page_dirty, 0);
+		atomic_init_db(&hp->hash_page_dirty, 0);
 #ifdef HAVE_STATISTICS
		hp->hash_io_wait = 0;
		hp->hash_frozen = hp->hash_thawed = hp->hash_frozen_freed = 0;
diff -ru a/src/mutex/mut_method.c b/src/mutex/mut_method.c
--- a/src/mutex/mut_method.c	2018-03-10 12:37:51.000000000 +0100
+++ b/src/mutex/mut_method.c	2018-03-10 12:40:40.000000000 +0100
@@ -479,7 +479,7 @@
	MUTEX_LOCK(env, mtx);
	ret = atomic_read(v) == oldval;
	if (ret)
-		atomic_init(v, newval);
+		atomic_init_db(v, newval);
	MUTEX_UNLOCK(env, mtx);

	return (ret);
diff -ru a/src/mutex/mut_tas.c b/src/mutex/mut_tas.c
--- a/src/mutex/mut_tas.c	2018-03-10 12:37:51.000000000 +0100
+++ b/src/mutex/mut_tas.c	2018-03-10 12:40:46.000000000 +0100
@@ -43,7 +43,7 @@

 #ifdef HAVE_SHARED_LATCHES
	if (F_ISSET(mutexp, DB_MUTEX_SHARED))
-		atomic_init(&mutexp->sharecount, 0);
+		atomic_init_db(&mutexp->sharecount, 0);
	else
 #endif
	if (MUTEX_INIT(&mutexp->tas)) {
@@ -617,7 +617,7 @@
			F_CLR(mutexp, DB_MUTEX_LOCKED);
			/* Flush flag update before zeroing count */
			MEMBAR_EXIT();
-			atomic_init(&mutexp->sharecount, 0);
+			atomic_init_db(&mutexp->sharecount, 0);
		} else {
			DB_ASSERT(env, sharecount > 0);
			MEMBAR_EXIT();
